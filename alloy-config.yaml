apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: logging
data:
  config.alloy: |
    // Logging configuration
    logging {
      level  = "info"
      format = "logfmt"
    }

    // Loki client configuration
    loki.write "default" {
      endpoint {
        url = "http://loki-loki-distributed-gateway:80/loki/api/v1/push"
      }
    }

    // Use file discovery with wildcard pattern - much simpler and more reliable
    loki.source.file "container_logs" {
      targets = [
        {
          __address__ = "localhost",
          __path__    = "/var/log/containers/*.log",
        },
      ]
      forward_to = [loki.process.spring_logs.receiver]
    }

    // Process and filter Spring Boot logs
    loki.process "spring_logs" {
      forward_to = [loki.write.default.receiver]

      // Parse container log format first
      stage.cri {}

      stage.regex {
        source     = "filename"
        expression = "/var/log/containers/(?P<pod_name>[^_]+(?:-[^_]+)*?)_(?P<namespace>[^_]+)_(?P<container_name>[^-]+(?:-[^-]+)*?)-[^.]+\\.log"
      }

      stage.match {
        selector = "{namespace=~\"(dev.*|staging)\"}"
        action   = "keep"
      }

      stage.match {
        selector = "{container_name=~\"(visits-service|customers-service|vets-service|api-gateway|config-server|discovery-server|admin-server|genai-service)\"}"
        action   = "keep"
      }

      // Add labels from extracted metadata
      stage.labels {
        values = {
          service   = "",  // Will be set from container_name below
          namespace = "",
          pod       = "",
          container = "",
          job       = "spring-boot-logs",
        }
      }

      // Set service label to match container name
      stage.template {
        source   = "container_name"
        template = "{{ .Value }}"
      }

      stage.labels {
        values = {
          service = "",  // Gets value from template above
        }
      }

      stage.template {
        source   = "pod_name"
        template = "{{ .Value }}"
      }

      stage.labels {
        values = {
          pod = "",  // Gets value from template above
        }
      }

      stage.regex {
        expression = ".*(TRACE|DEBUG|INFO|WARN|ERROR|FATAL).*"
      }

      stage.labels {
        values = {
          level = "",
        }
      }

      // Drop noisy health check logs
      stage.drop {
        expression = ".*actuator/health.*"
        drop_counter_reason = "health_check"
      }

      // Add metric to count processed logs
      stage.metrics {
        metric.counter {
          name = "spring_logs_processed_total"
          description = "Total Spring Boot logs processed"
        }
      }
    }
---
# DaemonSet and other resources remain the same
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: alloy
  namespace: logging
spec:
  selector:
    matchLabels:
      name: alloy
  template:
    metadata:
      labels:
        name: alloy
    spec:
      serviceAccountName: alloy
      containers:
        - name: alloy
          image: grafana/alloy:latest
          args:
            - run
            - /etc/alloy/config.alloy
            - --server.http.listen-addr=0.0.0.0:12345
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
          ports:
            - containerPort: 12345
              name: http-metrics
          securityContext:
            runAsUser: 0
      volumes:
        - name: config
          configMap:
            name: alloy-config
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
      tolerations:
        - operator: Exists
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alloy
  namespace: logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "services", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/proxy"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alloy
subjects:
  - kind: ServiceAccount
    name: alloy
    namespace: logging
