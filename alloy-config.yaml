alloy:
  configMap:
    content: |-
      logging {
        level = "info"
        format = "logfmt"
      }        
      loki.write "default" {
          endpoint {
            url = "http://loki-gateway.logging.svc.cluster.local/loki/api/v1/push"
          }
          external_labels = {
            cluster = "cluster-name-test",
          }
        }
      discovery.kubernetes "pods" {
        role = "pod"
      }
      discovery.relabel "relabeled_pods" {
        targets = discovery.kubernetes.pods.targets

        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
          action        = "replace"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          target_label = "app"
          action = "replace"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label  = "container"
          action        = "replace"
        }
        
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod"
          action        = "replace"
        }
      }

      loki.source.kubernetes "logs" {
        targets    = discovery.relabel.relabeled_pods.output
        forward_to = [loki.process.spring_logs.receiver]
      }

      loki.process "spring_logs" {
        forward_to = [loki.write.default.receiver]

        stage.regex {
          expression = ".*traceId=(?P<trace_id>[a-f0-9]{32}).*"
        }
        stage.labels {
          values = {
            trace_id = "trace_id",
          }
        }

        stage.drop {
          older_than          = "1h"
          drop_counter_reason = "too old"
        }

        stage.match {
          selector = "{namespace=~\"dev.*|staging\", container=~\"visits-service|customers-service|vets-service|api-gateway|config-server|discovery-server|admin-server|genai-service\"}"
          stage.regex {
            expression = ".*(?P<level>TRACE|DEBUG|INFO|WARN|ERROR|FATAL).*"
          }
          stage.drop {
            source     = "content"
            expression = ".*actuator/health.*"
          }
          stage.labels {
            values = {
              job   = "spring-boot-logs",
              level = "level",
            }
          }
        }

        stage.metrics {
          metric.counter {
            name        = "spring_logs_processed_total"
            description = "Total Spring Boot logs processed"
            action      = "inc"
          }
        }
      }

  mounts:
    varlog: true
    dockercontainers: true

  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
