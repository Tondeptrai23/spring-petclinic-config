apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: logging
data:
  config.alloy: |
    // Logging configuration
    logging {
      level  = "info"
      format = "logfmt"
    }

    // Loki client configuration
    loki.write "default" {
      endpoint {
        url = "http://loki-loki-distributed-gateway:80/loki/api/v1/push"
      }
    }

    // Kubernetes service discovery for pods
    discovery.kubernetes "pods" {
      role = "pod"
    }

    // Filter and relabel for Spring Boot services
    discovery.relabel "spring_services" {
      targets = discovery.kubernetes.pods.targets

      // Keep pods from dev-* namespaces and staging
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        regex         = "(dev.*|staging)"
        action        = "keep"
      }

      // Keep only your Spring Boot services (exclude init containers)
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app"]
        regex         = "(visits-service|customers-service|vets-service|api-gateway|config-server|discovery-server|admin-server|genai-service)"
        action        = "keep"
      }

      // Skip init containers and wait containers
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        regex         = "wait-for-.*"
        action        = "drop"
      }

      // Keep only running pods
      rule {
        source_labels = ["__meta_kubernetes_pod_phase"]
        regex         = "Running"
        action        = "keep"
      }

      // Add service label
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app"]
        target_label  = "service"
      }

      // Add namespace label
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }

      // Add pod name label
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }

      // Add container name label
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
      }

      // Construct proper log file path - this is the key fix
      rule {
        source_labels = ["__meta_kubernetes_pod_name", "__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        separator     = "_"
        target_label  = "__path__"
        replacement   = "/var/log/containers/${1}_${2}_${3}-*.log"
      }
    }

    // File source for container logs
    loki.source.file "container_logs" {
      targets    = discovery.relabel.spring_services.output
      forward_to = [loki.process.spring_logs.receiver]
    }

    // Process Spring Boot logs
    loki.process "spring_logs" {
      forward_to = [loki.write.default.receiver]

      // Parse container log format
      stage.cri {}

      // Extract Spring Boot log pattern
      stage.regex {
        expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2}[T\\s]\\d{2}:\\d{2}:\\d{2}[.,]\\d{3})\\s*(?P<level>TRACE|DEBUG|INFO|WARN|ERROR|FATAL)\\s+(?P<thread>\\[.*?\\])?\\s*(?P<logger>\\S+)?\\s*[:-]?\\s*(?P<message>.*)"
      }

      // Add extracted labels
      stage.labels {
        values = {
          level = "",
          thread = "",
          logger = "",
        }
      }

      // Drop noisy health check logs
      stage.drop {
        expression = ".*actuator/health.*"
        drop_counter_reason = "health_check"
      }
    }
---
# DaemonSet and other resources remain the same
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: alloy
  namespace: logging
spec:
  selector:
    matchLabels:
      name: alloy
  template:
    metadata:
      labels:
        name: alloy
    spec:
      serviceAccountName: alloy
      containers:
        - name: alloy
          image: grafana/alloy:latest
          args:
            - run
            - /etc/alloy/config.alloy
            - --server.http.listen-addr=0.0.0.0:12345
          volumeMounts:
            - name: config
              mountPath: /etc/alloy
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
          ports:
            - containerPort: 12345
              name: http-metrics
          securityContext:
            runAsUser: 0
      volumes:
        - name: config
          configMap:
            name: alloy-config
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
      tolerations:
        - operator: Exists
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alloy
  namespace: logging
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "services", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/proxy"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alloy
subjects:
  - kind: ServiceAccount
    name: alloy
    namespace: logging
